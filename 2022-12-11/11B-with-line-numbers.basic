10 MODE 7
11 T=TIME
20 ON ERROR PROCerror
30 DIM holding$(8), worry$(8), testDiv(8), onTrue(8), onFalse(8)
40 DIM inspections(8)
50 
60 FOR I=0 TO 7
70   READ holding$(I), worry$(I), testDiv(I), onTrue(I), onFalse(I)
80 NEXT
90
100 FOR r=1 TO 10000:PROCround(r):NEXT
105 P.''"Results..."
110 FOR m=0 TO 7:P. "Monkey ";m;" made ";inspections(m);" inspections.":NEXT
115 P. "Time passed: ";TIME-T
120 END
130 DEFPROCround(r)
140 IF (r MOD 100)=0 THEN P.".";
150 FOR I=0 TO 7
160 REPEAT
170 IF holding$(I)<>"" THEN PROCabuse(I)
180 UNTIL holding$(I)=""
190 NEXT
200 ENDPROC
210
220 DEFPROCabuse(I)
230 inspections(I)=inspections(I)+1
240
250 REM get and remove first item from monkey
260 comma=INSTR(holding$(I),","):REM no comma, only 1 item
270 IF comma>0 THEN item$=LEFT$(holding$(I),comma-1) ELSE item$=holding$(I)
280 IF comma>0 THEN holding$(I)=RIGHT$(holding$(I),LEN(holding$(I))-LEN(item$)-1) ELSE holding$(I)=""
290 PROCplot(I)
300
310 REM get old value, apply worry rule, divide by 3
320 old%=VAL(item$)
330 new%=EVAL(worry$(I)) MOD 9699690
340 REM new=INT(new/3)
350 REM IF new>=9699690 THEN new=new MOD 9699690
360 REM REPEAT:new=new-9699690:UNTIL new<9699690
370
380 REM test division
390 IF new% MOD testDiv(I)=0 THEN target=onTrue(I) ELSE target=onFalse(I)
400
410 REM throw item to next monkey
420 IF holding$(target)<>"" THEN holding$(target)=holding$(target)+","+STR$(new%)
430 IF holding$(target)="" THEN holding$(target)=holding$(target)+STR$(new%)
440 REM PROCplot(target)
450 ENDPROC
460
470 DEFPROCplot(monkey)
480 REM P.TAB(0,monkey+2);monkey;": ";inspections(monkey)
490 ENDPROC
500
510 DEFPROCerror
520 CLS
530 P. "Error at line: ";ERL
540 REPORT
545 P. '"Round: ";r
550 P. "Processing: ";old%
560 P. "Last processed value: ";new%
570 END
580 
590 REM  monkeys are 0-indexed
600 REM  starting items,            new =         / by, T, F
610 DATA "63,84,80,83,84,53,88,72", "old% * 11",   13,   4, 7
620 DATA "67,56,92,88,84",          "old% + 4",    11,   5, 3
630 DATA "52",                      "old% * old%", 2,    3, 1:REM * old
640 DATA "59,53,60,92,69,72",       "old% + 2",    5,    5, 6
650 DATA "61,52,55,61",             "old% + 3",    7,    7, 2
660 DATA "79,53",                   "old% + 1",    3,    0, 6
670 DATA "59,86,67,95,92,77,91",    "old% + 5",    19,   4, 0
680 DATA "58,83,89",                "old% * 19",   17,   2, 1
